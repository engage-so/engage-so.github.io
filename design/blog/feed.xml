<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>The Mailintel Blog</title>
		<description>Product updates, announcements, conversations on transactional emails and more.</description>
		<link>http://mailintel.io/blog</link>
		<atom:link href="http://mailintel.io/blog/feed.xml" rel="self" type="application/rss+xml" />
			<item>
				<title>Understanding Amazon SES Configuration Sets and how Mailintel uses them</title>
				<description>&lt;p&gt;Configuration Sets are settings for emails you send using Amazon SES. They are broadly used for &lt;a href=&quot;https://mailintel.io/resources/tracking-deliveries-opens-and-clicks-for-amazon-ses&quot;&gt;tracking email events&lt;/a&gt; and sending emails with dedicated IPs.&lt;/p&gt;
&lt;img src=&quot;https://mailintel.io/images/blog/130720/config-sets.png&quot;&gt;
&lt;h3&gt;How Mailintel uses configuration sets&lt;/h3&gt;
&lt;p&gt;Configuration Sets are how Mailintel is able to track your Amazon SES transactional emails and provide analytic reporting. When you add a domain to Mailintel, the application automatically creates a configuration set for you. To do this, we request you add an IAM credentials with Full SNS and SES access.&lt;/p&gt;
&lt;p&gt;Here is the breakdown of the process in 4 steps.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Mailintel creates a SNS Topic. This is named &lt;code&gt;mailintel&lt;/code&gt; for easy identification.&lt;/li&gt;
  &lt;li&gt;A subscription to the topic is created. The subscription points the topic to a webhook that handles messages to the SNS topic.&lt;/li&gt;
  &lt;li&gt;Mailintel creates the configuration set. This is also named &lt;code&gt;mailintel&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Mailintel creates the configuration set event destination. This involves 2 things: selecting the events to track and pointing the configuration set to the SNS topic created earlier. The events tracked are &lt;code&gt;reject&lt;/code&gt;, &lt;code&gt;bounce&lt;/code&gt;, &lt;code&gt;complaint&lt;/code&gt;, &lt;code&gt;delivery&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;click&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you get an error when adding your domain, itâ€™s most likely an issue with the access keys. Ensure they have full SNS and SES permissions.&lt;/p&gt;
&lt;h3&gt;What the access keys are used for?&lt;/h3&gt;
&lt;p&gt;The SNS and SES permissions are used to created and manage the SNS topic, SNS topic subscription and SES configuration set. Mailintel also allows sending quick mails to users directly from the dashboard. The SES permission is used for this.&lt;/p&gt;
&lt;h3&gt;Confirming proper setup&lt;/h3&gt;
&lt;p&gt;Here is how to confirm everything has been properly set up.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Go to SNS on your Amazon console. Click on &lt;strong&gt;Topics&lt;/strong&gt;. You should see &lt;strong&gt;mailintel&lt;/strong&gt; in the list of topics.&lt;/li&gt;
  &lt;li&gt;Click on the mailintel topic. It should have an HTTPS subscription pointing to a URL similar to this &lt;code&gt;https://us-central1-suet-170506.cloudfunctions.net/ses-webhook&lt;/code&gt;. The status should be &lt;strong&gt;confirmed&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Go to SES on your Amazon console.  Click on &lt;strong&gt;Configuration Sets&lt;/strong&gt;. You should see &lt;strong&gt;mailintel&lt;/strong&gt; in the list of configuration sets.&lt;/li&gt;
  &lt;li&gt;Click on the mailintel configuration set. It should have the mailintel SNS topic as its destination and should have the event types &lt;i&gt;Bounce, Click, Complaint, Delivery, Open, Reject&lt;/i&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Updating the configuration set&lt;/h3&gt;
&lt;p&gt;&lt;i&gt;Do not do this unless you know what you are doing.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Now that weâ€™ve established you understand what you are doing, you may need to update the configuration set for custom purposes; especially because you can only use one configuration set at a time when sending emails.&lt;/p&gt;
&lt;img src=&quot;https://mailintel.io/images/blog/130720/edit-config-set.png&quot; alt=&quot;Update configuration set&quot;&gt;
&lt;ol&gt;
  &lt;li&gt;You can add additional destination to the configuration set by clicking on the mailintel configuration set and selecting a new option for &lt;strong&gt;Add destination&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;You can add an IP pool by clicking the &lt;strong&gt;Sending IP pool&lt;/strong&gt; tab&lt;/li&gt;
  &lt;li&gt;You can update the tracked events, for example to disable open or click tracking. To do this, click on the edit (pencil icon) option on the configuration set page and uncheck the events you want to stop tracking. Mailintel doesnâ€™t track &lt;code&gt;Send&lt;/code&gt;, &lt;code&gt;Rendering Failure&lt;/code&gt; and &lt;code&gt;Rendering Success&lt;/code&gt; so donâ€™t check those.&lt;/li&gt;
  &lt;li&gt;You can also use a custom subdomain for your open and click tracking. This option is available on the same edit configuration set page above.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Telling Amazon SES to use the configuration set&lt;/h3&gt;
&lt;p&gt;Using the configuration set is not automatic. We need to tell Amazon to use it anytime we send an email. Depending on how you are sending your email and what library you use, you just need to add the SMTP header: &lt;code&gt;X-SES-CONFIGURATION-SET: mailintel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you use PHP Laravel for example, here is a short post on how to do this: &lt;a href=&quot;https://eoghanobrien.com/posts/laravel-smtp-ses-configuration-set&quot; target=&quot;_blank&quot;&gt;eoghanobrien.com/posts/laravel-smtp-ses-configuration-set&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use PHPMailer, it should be something like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// ...
$mail = new PHPMailer(true);
try {
    $mail-&gt;isSMTP();
    // ...
    $mail-&gt;addCustomHeader('X-SES-CONFIGURATION-SET', 'mailintel');  // &lt;-- this
    // ...
    $mail-&gt;Send();
} catch (Exception $e) {
    echo &quot;Email not sent. {$mail-&gt;ErrorInfo}&quot;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you use SwiftMailer: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// ...
$mailer = new Swift_Mailer($transport);

$message = new Swift_Message('Wonderful Subject');
$headers = $message-&gt;getHeaders();
$headers-&gt;addTextHeader('X-SES-CONFIGURATION-SET', 'mailintel');  // &lt;-- this
$message-&gt;setFrom(['john@doe.com' =&gt; 'John Doe'])
  -&gt;setTo(['receiver@domain.org', 'other@domain.org' =&gt; 'A name'])
  -&gt;setBody('Here is the message itself')
  ;

$result = $mailer-&gt;send($message);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In NodeMailer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const transporter = nodemailer.createTransport(transportObject);

await transporter.sendMail({
  from: '&quot;Fred Foo ðŸ‘»&quot; &lt;foo@example.com&gt;',
  to: &quot;bar@example.com, baz@example.com&quot;,
  subject: &quot;Hello âœ”&quot;,
  text: &quot;Hello world?&quot;,
  html: &quot;&lt;b&gt;Hello world?&lt;/b&gt;&quot;,
  headers: {
      'X-SES-CONFIGURATION-SET': 'mailintel'  // &lt;-- this
  },
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AWS NodeJs library&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ses = new AWS.SES({
  accessKeyId: process.env.ID,
  secretAccessKey: process.env.KEY,
  region: process.env.REGION
});
ses.sendEmail({
  Destination: {
    ToAddresses: ['yo@hey.com']
  },
  Message: {
    Body: {
    Html: {
      Charset: &quot;UTF-8&quot;,
      Data: '&lt;p&gt;Yo. This is a test :)&lt;/p&gt;'
    },
    Text: { Data: 'Yo. This is test :)' }
    },
    Subject: { Data: 'Hey' }
  },
  ConfigurationSetName: 'mailintel', // &lt;-- this
  Source:  '&quot;Mailintel&quot; &lt;hello@mailintel.io&gt;'
  }, (err, data) =&gt; {
  console.log(data, err);
  // ~
})&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are sending your email via the &lt;a href=&quot;https://docs.aws.amazon.com/ses/latest/APIReference/API_SendRawEmail.html&quot; target=&quot;_blank&quot;&gt;sendRawEmail&lt;/a&gt; or &lt;a href=&quot;https://docs.aws.amazon.com/ses/latest/APIReference/API_SendEmail.html&quot; target=&quot;_blank&quot;&gt;SendEmail&lt;/a&gt; API, there is a &lt;code&gt;ConfigurationSetName&lt;/code&gt; parameter you should set to &lt;code&gt;mailintel&lt;/code&gt;.&lt;/p&gt;</description>
				<pubDate>Mon, 13 July 2020 00:00:00 +0000</pubDate>
				<link>https://mailintel.io/blog/understanding-amazon-ses-configuration-sets</link>
				<guid isPermaLink="true">https://mailintel.io/blog/understanding-amazon-ses-configuration-sets</guid>
			</item>
			<item>
				<title>Suet is now Mailintel</title>
				<description>&lt;p&gt;One of the biggest decisions made on Suet was to do a rebrand. You would have noticed the changesâ€“new logo, fresh look, new identity. Or even received the email if you are an existing customer. In this post, I explain the reasons behind the decision and how it affects you as a customer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mailintel.io/images/blog/mailintel.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Why was this done?&lt;/h3&gt;
&lt;p&gt;Over the last two years, Suet has provided transactional email analytics and reporting for transactional emails sent using Mailgun and Amazon SES. We believe transactional emails are a big part of every product and we continually explore ways to deliver good insight from the performance of these mails. We recently added new intelligence features across feeds, mails and the users section. We wanted users to be able to identify and segment mails, users and their event feed based on certain parameters like subject, email, delivery status, clicked links, interaction date and many more. These changes required design adjustments that had to be done. This also meant rewriting a lot of the backend infrastructure and upgrading a lot dependencies. In the end, we figured it would be a great idea to do a total redesign and a name change to reflect the changes and the direction the product is moving.&lt;/p&gt;
&lt;h3&gt;What &lt;s&gt;will&lt;/s&gt; has changed?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;New logo and site redesign &#x1F973;&lt;/li&gt;
  &lt;li&gt;A shinny new domain at &lt;a href=&quot;https://mailintel.io/&quot;&gt;mailintel.io&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The twitter account is now &lt;a href=&quot;https://twitter.com/mailintel&quot;&gt;@mailintel&lt;/a&gt; (follow, follow, follow).&lt;/li&gt;
  &lt;li&gt;Contact email now hello at mailintel.io. Transactional emails will come from mails@m.mailintel.io (don't send email to this).&lt;/li&gt;
  &lt;li&gt;Segmentation of Feeds, Mails and Users.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://mailintel.io/images/users.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mailintel.io/images/mails.gif&quot;&gt;&lt;/p&gt;
&lt;h3&gt;How does this affect existing users?&lt;/h3&gt;
&lt;p&gt;You don't need to do anything. The current Suet domain and existing app will continue to work for a couple of weeks then will redirect to the new domain and app at &lt;a href=&quot;https://mailintel.io&quot;&gt;mailintel.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We will continue to optimise the new site to ensure it works as should. We can't wait to see you use the new platform and give us feedback. Please keep them coming: hello at mailintel.io.&lt;/p&gt;</description>
				<pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
				<link>https://mailintel.io/blog/suet-is-now-mailintel</link>
				<guid isPermaLink="true">https://mailintel.io/blog/suet-is-now-mailintel</guid>
			</item>
	</channel>
</rss>
