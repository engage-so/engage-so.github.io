<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mailintel/Resources</title>
		<description>Articles, tips/tricks and resources on working with transactional emails and email service providers</description>
		<link>http://mailintel.io/resources</link>
		<atom:link href="http://mailintel.io/resources/feed.xml" rel="self" type="application/rss+xml" />
			<item>
				<title>Getting mail event data with Mailgun webhooks</title>
				<description>&lt;p&gt;Tracking mail events like opens, clicks, failures and complaints can be done on &lt;a href="http://mailgun.com/"&gt;Mailgun&lt;/a&gt; using Mailgun webhooks. Although this data is available in the Mailgun account dashboard, there are many reasons using the webhooks may come in handy. Because the webhook is a realtime push to you, you can collect the information to do things like visualisation, reporting or presentation of the mail data in any form or through any channel you want. There is also an API to get the events but using the webhooks has more advantages.&lt;p&gt;
  &lt;ol&gt;
    &lt;li&gt;You don’t have to make repeated API requests. This means lesser resources.&lt;/li&gt;
   &lt;li&gt;Updates are more realtime because it is pushed as soon as available on the server.&lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h3&gt;Setting it up&lt;/h3&gt;
  &lt;p&gt;There are two ways to set up webhooks in Mailgun. It can either be done through the Mailgun dashboard or &lt;a href="http://mailgun-documentation.readthedocs.io/en/latest/api-webhooks.html#webhooks"&gt;API&lt;/a&gt;. The more straightforward way to do it is through the dashboard. Once logged into your dashboard, a &lt;strong&gt;Webhooks&lt;/strong&gt; link is available on the navigation bar.
  
  
    &lt;div class="pa4"&gt;
      &lt;div class="fl-ns w-third-ns w-100"&gt;
        &lt;img src="http://mailintel.io/images/resources/100520/webhooks.png" class="db mr3 bordered"&gt;
      &lt;/div&gt;
      &lt;div class="fl-ns w-two-thirds-ns w-100"&gt;
        &lt;img src="http://mailintel.io/images/resources/100520/new-webhook.png" class="db ml3 bordered"&gt;
      &lt;/div&gt;
      &lt;div class="cb"&gt;&lt;/div&gt;
    &lt;/div&gt;
  
  &lt;p&gt;On the webhooks page, you can click the &lt;strong&gt;Add webhook&lt;/strong&gt; button to set the URL the event data for the different events can be sent to.&lt;/p&gt;
  
  &lt;h3&gt;Handling the data&lt;/h3&gt;
  &lt;p&gt;To handle the event data sent to our webhook URL, we must know what the data looks like in the first place. Parameters sent via POST are available in the &lt;a href="https://documentation.mailgun.com/en/latest/user_manual.html#tracking-opens"&gt;API documentation&lt;/a&gt;. We can go a step further and confirm this by using a test webhook URL that will log the data from Mailgun. We can use &lt;a href="http://bin.mailgun.net/"&gt;Mailgun’s Postbin&lt;/a&gt; or &lt;a href="https://webhook.site/"&gt;Webhook.site&lt;/a&gt;. These services will generate a unique endpoint we can use in the Mailgun dashboard to get sample event data. We will be using webhook.site for this post.&lt;/p&gt;
  
  &lt;p&gt;Let’s go ahead to create a test endpoint and see what the event data look like compared to what is in the documentation.&lt;/p&gt;
  
  &lt;ul&gt;
  &lt;li&gt;Visit &lt;a href="http://webhook.site"&gt;webhook.site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Copy the generated URL and access the Webhooks section of your Mailgun dashboard.&lt;/li&gt;
  &lt;li&gt;Paste the URL in the &lt;strong&gt;URL to test&lt;/strong&gt; input field of the &lt;strong&gt;Test webhook&lt;/strong&gt; section and click the &lt;strong&gt;Test Webhook&lt;/strong&gt; button. This will send sample event data to the URL.&lt;/li&gt;
  &lt;li&gt;Repeat this for all the events you are interested in. Ignore the ones labeled &lt;strong&gt;Legacy&lt;/strong&gt;.&lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;img src="http://mailintel.io/images/resources/100520/test-url.png" class="db mv2"&gt;
  
  &lt;p&gt;Now that we know what the parameters are for each event types and the content type they may come in, it is easy to write the code that will handle the sent data. Here is a simple code that will output details of &lt;strong&gt;complaints&lt;/strong&gt; and &lt;strong&gt;dropped&lt;/strong&gt; emails.&lt;/p&gt;
  
  &lt;pre&gt;&lt;code class="language-js"&gt;const express = require(‘express’)
      , bodyParser = require(‘body-parser’)
      , multer = require(‘multer’)
      ;
  
  const app = express();
  app.use(bodyParser.urlencoded({extended: false}));
  app.listen(process.env.PORT || 3000);
  
  app.post(‘/webhook’, multer().none(), function(req, res) {
    const email = req.body.recipient;
    const event = req.body.event;
  
    if (event == ‘complained’) {
      console.log(`${email} complained about your mail`);
    }
    else if (event == ‘dropped’) {
      console.log(`Mail to ${email} dropped. ${event.description}`);
    }
    else if (event == ‘bounced’) {
      console.log(`Error ${event.code}: Mail to ${email} bounced. ${event.error}`);
    }
  
    res.end();
  });&lt;/code&gt;&lt;/pre&gt;
  
  
  &lt;h3&gt;Making it secure&lt;/h3&gt;
  &lt;p&gt;Nothing stops anyone that knows our webhook URL from crafting a false event data and sending it to the URL. Luckily, Mailgun signs each request sent and posts the following parameters along:&lt;/p&gt;
  
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;timestamp&lt;/code&gt; (Number of seconds passed since January 1, 1970)&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;token&lt;/code&gt; (Randomly generated string with length 50)&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;signature&lt;/code&gt; (Hexadecimal string generated by HMAC algorithm)&lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;To verify the token;&lt;/p&gt;
  
  &lt;ul&gt;
  &lt;li&gt;Concatenate the values of &lt;code&gt;timestamp&lt;/code&gt; and &lt;code&gt;token&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Encode the resulting string with HMAC, using your Mailgun API key as the key and Sha256 as the algorithm.&lt;/li&gt;
  &lt;li&gt;The result should be the same as the signature.&lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;Here is what it looks like in Node.js:&lt;/p&gt;
  
  &lt;pre&gt;&lt;code class="language-js"&gt;const value = event_data_timestamp+event_data_token;
  const hash = crypto.createHmac(‘sha256’, apikey)
                     .update(value)
                     .digest(‘hex’);
  if (hash !== event_data_signature) {
    console.log(‘Invalid signature’);
    return;
  }&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;If we add that to our original code example, we will have something like this:&lt;/p&gt;
  
  &lt;pre&gt;&lt;code class="language-js"&gt;const express = require(‘express’)
      , crypto = require(‘crypto’)
      , multer = require(‘multer’)
      , bodyParser = require(‘body-parser’)
      ;
  
  const app = express();
  app.use(bodyParser.urlencoded({extended: false}));
  app.listen(process.env.PORT || 3000);
  
  app.get(‘/webhook’, multer().none(), function(req, res) {
    // Validate signature
    const value = req.body.timestamp+req.body.token;
    const hash = crypto.createHmac(‘sha256’,
                process.env.API_KEY)
                     .update(value)
                     .digest(‘hex’);
    if (hash !== req.body.signature) {
      console.log(‘Invalid signature’);
      return res.end();
    }
  
    // Log status of event
    const email = req.body.recipient;
    const event = req.body.event;
  
    if (event == ‘complained’) {
      console.log(`${email} complained about your mail`);
    }
    else if (event == ‘dropped’) {
      console.log(`Mail to ${email} dropped. ${event.description}`);
    }
    else if (event == ‘bounced’) {
      console.log(`Error ${event.code}: Mail to ${email} bounced. ${event.error}`);
    }
  
    res.end();
  });&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;We can even step this up and:&lt;/p&gt;
  
  &lt;ol&gt;
    &lt;li&gt;For every request, check against a token cache to prevent use of the same token. Every token will be stored there. This will prevent replay attacks.&lt;/li&gt;
    &lt;li&gt;Check if the timestamp is not too far from the current time.&lt;/li&gt;
  &lt;/ol&gt;
  
  &lt;h3&gt;Making it scalable&lt;/h3&gt;
  &lt;p&gt;If you send lots of emails and you are expecting lots of events, putting your webhook script on a server that can’t scale automatically is a bad idea. Even if you are not expecting lots of events, unexpected things can lead to a surge in events. Having a server that can scale automatically is really useful for instances like this.&lt;/p&gt;
  
  &lt;p&gt;Enter &lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;Serverless computing&lt;/a&gt;. In simple terms, the idea is that you can delegate the execution of your code and everything related to another service. Because multiple instances of your code can be executed in parallel and you can adjust computing resources like RAM and execution time on the fly, it is highly scalable. You are also charged based on consumed resources and execution time so it can be really cheap.&lt;/p&gt;
  
  &lt;p&gt;There are a couple of serverless computing providers. One I use and recommend is &lt;a href="https://cloud.google.com/functions/"&gt;Google Cloud Functions&lt;/a&gt; because of the ease of setting up &lt;strong&gt;HTTP functions&lt;/strong&gt;. An HTTP function is a code block wrapped as a function that can be triggered by visiting a URL. This is exactly what we need as our webhook.&lt;/p&gt;
  
  &lt;p&gt;To create this function, we need to write a JavaScript function that will be exported as a Node.js module. The function takes HTTP-specific arguments: `request` and `response`.&lt;/p&gt;
  
  &lt;pre&gt;&lt;code class="language-js"&gt;
  exports.webhook = function(request, response) {
    // Handle event data here
    response.send({status:”ok”});
  }&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;Based on the request &lt;code&gt;content-type&lt;/code&gt;, the body of the request is automatically passed and available in the &lt;strong&gt;body&lt;/strong&gt; parameter of the request object.&lt;/p&gt;
  
  &lt;pre&gt;&lt;code class="language-js"&gt;
  exports.webhook = function(request, response) {
    let event = request.body.event; // delivered
    // Handle event data here
    // …
    response.send({status:”ok”});
  }&lt;/code&gt;&lt;/pre&gt;
  
  &lt;p&gt;Next, we can publish the function to Cloud Functions. An easy way to do this is to do it from the Cloud Functions dashboard.&lt;/p&gt;
  
  &lt;ul&gt;
  &lt;li&gt;Go to your &lt;a href="https://console.cloud.google.com"&gt;Google Cloud Console&lt;/a&gt; (if you don’t have an account yet, create one).&lt;/li&gt;
  &lt;li&gt;Enable Cloud Functions in the dashboard.&lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Create Function&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Enter a name for your function (e.g &lt;i&gt;mailgun-webhook&lt;/i&gt;).&lt;/li&gt;
  &lt;li&gt;In the trigger section, select &lt;strong&gt;HTTP trigger&lt;/strong&gt;. Note the URL, that will be your webhook URL.&lt;/li&gt;
  &lt;li&gt;Copy your event data handling code to the &lt;code&gt;index.js&lt;/code&gt; section of the Cloud function.&lt;/li&gt;
  &lt;li&gt;Copy the content of your &lt;code&gt;package.json&lt;/code&gt; and paste in the &lt;code&gt;package.json&lt;/code&gt; section.&lt;/li&gt;
  &lt;li&gt;Select or create a &lt;strong&gt;Stage bucket&lt;/strong&gt;. The stage bucket is simply where the code is staged. You can use anything here.&lt;/li&gt;
  &lt;li&gt;In Function to execute, enter the name of your function (e.g &lt;i&gt;webhook&lt;/i&gt;).&lt;/li&gt;
  &lt;li&gt;Save.&lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;You can now use the function’s URL in Mailgun as your webhook URL.&lt;/p&gt;
  
  &lt;h3&gt;Conclusion&lt;/h3&gt;
  &lt;p&gt;Working with Mailgun’s webhooks is easy. There are many ways the event data can be used to enrich your applications outside Mailgun. If for example you allow your users send emails from your web for any reason and you use Mailgun, you can use this to provide analytics for them. Or maybe you want to send your email analytics to another platform. Or maybe you want to be notified of failures in your Slack account. Or maybe not even that. Maybe you just want more detailed analytics than what is available on the Mailgun dashboard. Whatever the use case is, the event data is available for you.&lt;/p&gt;
  
  &lt;p&gt;If you are interested in a more detailed analytics, reporting and business intelligence for your transactional emails through Mailgun, without setting all these yourself, create a &lt;a href="/signup"&gt;free Mailintel account&lt;/a&gt;.&lt;/p&gt;</description>
				<pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
				<link>https://mailintel.io/resources/getting-mail-event-data-with-mailgun-webhooks</link>
				<guid isPermaLink="true">https://mailintel.io/resources/getting-mail-event-data-with-mailgun-webhooks</guid>
			</item>
			<item>
				<title>Tracking deliveries, opens, clicks, failures and complaints for Amazon SES</title>
				<description>&lt;p&gt;&lt;i&gt;This post explains how to track deliveries, opens, clicks, failures and complaints for Amazon SES emails. It details how &lt;a href="https://mailintel.io/"&gt;Mailintel&lt;/a&gt; gets email events from Amazon SES and how you can do it yourself.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://mailintel.io/images/resources/161219/header.png" class="db mb2"&gt;&lt;/p&gt;

&lt;p&gt;There are various ways to monitor email sending events if you use Amazon Simple Email Service (SES). Email sending events refer to metrics related to emails you send from the service. These are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sends - Emails that have reached Amazon SES&lt;/li&gt;
&lt;li&gt;Rejects - Emails Amazon SES did not attempt delivery on. A reason for this could be if it contained a virus for example.&lt;/li&gt;
&lt;li&gt;Bounces - Emails that were sent but rejected by the receiver’s mail server. This could happen if the email address does not exist for example. &lt;/li&gt;
&lt;li&gt;Complaints - Emails marked as spam by recipient&lt;/li&gt;
&lt;li&gt;Deliveries - Emails successfully delivered&lt;/li&gt;
&lt;li&gt;Opens - Emails that have been opened&lt;/li&gt;
&lt;li&gt;Clicks - Link within email was clicked&lt;/li&gt;
&lt;li&gt;Rendering Failures - Template rendering issue with email. This will only happen if you are using &lt;a href="https://docs.aws.amazon.com/ses/latest/APIReference/API_Template.html" target="_blank" rel="noopener noreferrer"&gt;Amazon SES Templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amazon has a Sending Statistics page and Reputation dashboard page that shows the number of deliveries, rejects, bounce and complaints. But what if we want to see which mails were actually rejected or bounced? Or even see the emails that were opened and links that were clicked? Or perform an action when any of these event occur? Enter &lt;strong&gt;event publishing&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Event publishing&lt;/h3&gt;

&lt;p&gt;Event publishing is simply telling Amazon SES to send email sending events to a particular destination. The way it works is this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We create a &lt;strong&gt;configuration set&lt;/strong&gt;. A configuration set lets us select the events we want Amazon SES to send and to what destination (Amazon CloudWatch, Firehose or SNS).&lt;/li&gt;
  &lt;li&gt;When sending our email, we tell Amazon SES to use that configuration set. Amazon SES will then send the events for the email (or emails) to the configuration set destination. For this post, we will be using Amazon SNS (Simple Notification Service) as our destination. With SNS, we can further send the events to a webhook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Creating a configuration set and SNS destination&lt;/h3&gt;

&lt;p&gt;Let’s start by creating a configuration set.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your SES dashboard in your &lt;a href="https://console.aws.amazon.com/ses/home" target="_blank" rel="noopener noreferrer"&gt;AWS console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Configuration Sets&lt;/strong&gt; in the left menu option&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Create Configuration Set&lt;/strong&gt; button&lt;/li&gt;
&lt;li&gt;You will need to give it a name. Add a name and create. &lt;/li&gt;
&lt;li&gt;Once done, click on the configuration set to add a destination. Select &lt;strong&gt;SNS&lt;/strong&gt; as your destination.&lt;/li&gt;
&lt;li&gt;You will be prompted to select the events you want data for. You will also need to add a name. If you are tracking opens or clicks (as we will), you will be prompted to use Amazon SES default domain or Use your own subdomain. For this piece we will stick to using Amazon SES default domain.&lt;/li&gt;
&lt;li&gt;Under the &lt;strong&gt;Topic&lt;/strong&gt; section, select &lt;strong&gt;Create SNS Topic&lt;/strong&gt;. We only need to add a topic name and we are good.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="http://mailintel.io/images/resources/161219/create.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://mailintel.io/images/resources/161219/set-destination.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://mailintel.io/images/resources/161219/select-topic.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://mailintel.io/images/resources/161219/create-topic.png"&gt;&lt;/p&gt;

&lt;p&gt;Now that we are done creating our configuration set and a SNS Topic, we need to update our SNS to add a webhook to receive the published events. But first, we need our webhook script.&lt;/p&gt;

&lt;h3&gt;Creating the script and webhook&lt;/h3&gt;

&lt;p&gt;Before we can add a webhook to our SNS, we need to create the script to process the received events first. To do so, we also need to know what the events data look like. We can find &lt;a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/event-publishing-retrieving-sns-examples.html" target="_blank" rel="noopener noreferrer"&gt;examples of Amazon SES Event Data here&lt;/a&gt;. (Also take a look at the content structure here: &lt;a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/event-publishing-retrieving-sns-contents.html" target="_blank" rel="noopener noreferrer"&gt;Contents of Amazon SES Event Data Published to Amazon SNS&lt;/a&gt;). With this, we can build a script that can handle the various event types.&lt;/p&gt;

&lt;p&gt;Let’s create a boilerplate in Node.js. Create and change directory to a new directory. Let's call it &lt;code&gt;ses-events&lt;/code&gt;. &lt;/p&gt;
  
&lt;code&gt;
&lt;pre&gt;
mkdir ses-events
cd ses-events/
&lt;/pre&gt;
&lt;/code&gt;

&lt;p&gt;Initialise the project and install express and body-parser.&lt;/p&gt;

&lt;code&gt;
&lt;pre&gt;
npm init
npm i --save express body-parser
&lt;/pre&gt;
&lt;/code&gt;

&lt;p&gt;Create an &lt;code&gt;index.js&lt;/code&gt; file with the content below. Modify as you want to.&lt;/p&gt;

&lt;code&gt;
&lt;pre&gt;
const express = require('express')
const bodyParser = require('body-parser')

const app = express()
app.listen(process.env.PORT || 3000)
app.use(bodyParser.urlencoded({ extended: true }))
app.use(bodyParser.json())

app.post('/', (req, res) =&gt; {
  try {
    const body = JSON.parse(req.body.Message)

    // If there is no event type, then we've got nothing
    if (!body.eventType) { return res.end() }

    // What's the event?
    const event = body.eventType.toLowerCase()
    const eventData = body
    console.log(JSON.stringify(eventData, null 2))

    const domain = event_data.mail.tags['ses:from-domain'][0]
    const messageId = event_data.mail.messageId
    const date = new Date(eventData.mail.timestamp)
    const email = event_data.mail.destination[0]
    const subject = eventData.mail.commonHeaders.subject

    // #todo: Verify event is from SES

    if (event == 'click') {
      const ua = eventData.click.userAgent
      const url = eventData.click.link
      // do stuff here
    } else if (event == 'open') {
      const ua = eventData.open.userAgent
      // do stuff here
    } else if (event == 'delivery') {
      // do stuff here
    } else if (event == 'complaint') {
      const ua = eventData.complaint.userAgent
      // do stuff here
    } else if (event == 'reject') {
      const ua = eventData.complaint.userAgent
      const reason = eventData.reject.reason
      // do stuff here
    } else if (event == 'bounce') {
      const description = eventData.bounce.bouncedRecipients[0].diagnosticCode
      // do stuff here
    } else {
      // Not supported
      // do stuff here
    }

    // anything else can come in here
    
    return res.end()
  } catch (err) {
    // #todo: Track error here
    res.end()
  }
})
&lt;/pre&gt;
&lt;/code&gt;

&lt;p&gt;For test, you can run this locally and use &lt;a href="https://ngrok.com/" target="_blank" rel="noopener noreferrer"&gt;ngrok&lt;/a&gt; to create a public URL to it. Or use a service like &lt;a href="https://heroku.com/" target="_blank" rel="noopener noreferrer"&gt;Heroku, &lt;a href="https://now.sh/" target="_blank" rel="noopener noreferrer"&gt;Now&lt;/a&gt; or &lt;a href="https://glitch.me/" target="_blank" rel="noopener noreferrer"&gt;Glitch&lt;/a&gt; to host it. Once we have a URL for our script, we can update SNS to send the events to the URL.&lt;/p&gt;

&lt;p&gt;Go to SNS and click on the topic created for the configuration set. Click create subscription, choose http (or https if your host provides you that).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://mailintel.io/images/resources/161219/sns.png" class="bordered"&gt;&lt;/p&gt;

&lt;p&gt;There is a tiny part we missed. We need to confirm the endpoint before Amazon SES can send events data to it. Amazon will send a URL to it (&lt;code&gt;SubscribeURL&lt;/code&gt; to it via POST) and expects us to visit the sent URL. We can update our webhook script to take care of this automatically.&lt;/p&gt;

&lt;code&gt;
&lt;pre&gt;
const got = require('got')
const express = require('express')
const bodyParser = require('body-parser')

const app = express()
app.listen(process.env.PORT || 3000)
app.use(bodyParser.urlencoded({ extended: true }))
app.use(bodyParser.json())

app.post('/', (req, res) =&gt; {
  try {

    // Include this new block
    // to confirm subscription
    if (req.is('text/*')) {
      req.body = JSON.parse(req.body)
      if (req.body.SubscribeURL) {
        await got(req.body.SubscribeURL)
        return res.end()
      }
    }
    // \endblock

    const body = JSON.parse(req.body.Message)
    // ...rest of our script
&lt;/pre&gt;
&lt;/code&gt;

&lt;p&gt;I am using &lt;a href="https://github.com/sindresorhus/got" target="_blank" rel="noopener noreferrer"&gt;got&lt;/a&gt; to "visit" the &lt;code&gt;SubscriptionURL&lt;/code&gt; so be sure to install it.&lt;/p&gt;
&lt;code&gt;&lt;pre&gt;npm i --save got&lt;/pre&gt;&lt;/code&gt;

&lt;p&gt;Click the &lt;strong&gt;Create Subscription&lt;/strong&gt; button once done and you should be good.&lt;/p&gt;

&lt;h3&gt;Sending with the configuration set&lt;/h3&gt;

&lt;p&gt;The next part of the piece is telling Amazon SES to use our configuration set when sending emails. This is not done automatically. You need to edit your send scripts to add a header to tell Amazon SES to use the configuration set.&lt;/p&gt;

&lt;p&gt;If you are using SMTP, simply add the header:&lt;/p&gt;

&lt;code&gt;
&lt;pre&gt;
X-SES-CONFIGURATION-SET: config-set-name
&lt;/pre&gt;
&lt;/code&gt;

&lt;p&gt;In PHPMailer for example, this will look like this: &lt;/p&gt;

&lt;code&gt;
&lt;pre&gt;
// ...
$mail = new PHPMailer();
// ...other lines here
// custom header for config set
$mail-&gt;addCustomHeader('X-SES-CONFIGURATION-SET', 'config-set-name');
// ...
&lt;/pre&gt;
&lt;/code&gt;

&lt;p&gt;If you are using the AWS SES Nodejs Library, it will look like this&lt;/p&gt;
    
&lt;code&gt;
&lt;pre&gt;
const ses = new AWS.SES({
  accessKeyId: process.env.ID,
  secretAccessKey: process.env.KEY,
  region: process.env.REGION
});
ses.sendEmail({
  Destination: {
    ToAddresses: ['kehers@gmail.com']
  },
  Message: {
    Body: {
    Html: {
      Charset: "UTF-8",
      Data: '&lt;p&gt;Yo. This is a test :)&lt;/p&gt;'
    },
    Text: { Data: 'Yo. This is test :)' }
    },
    Subject: { Data: 'Hey' }
  },
  ConfigurationSetName: 'demo', // &lt;-- this
  Source:  '"Mailintel" &lt;hello@mailintel.io&gt;'
  }, (err, data) =&gt; {
  console.log(data, err);
  // ~
})
&lt;/pre&gt;
&lt;/code&gt;

&lt;h3&gt;Making it scalable&lt;/h3&gt;

&lt;p&gt;If you send a lot of mails, it is important your script is hosted on a platform that can handle a lot of multiple connections and surge. You need a service that can automatically scale depending on the number of requests. My recommendation is to use services like Amazon Lambda or Google Cloud functions. The additional beauty of such service is you are not charged for periods your script do not have any requests. What’s more interesting is that you can directly connect Amazon SNS to Amazon Lambda.&lt;/p&gt;

&lt;p&gt;To create a Lambda function, we only need to make slight changes to our script.&lt;/p&gt;

&lt;code&gt;
&lt;pre&gt;
const got = require('got')
exports.handler = (event, context, callback) =&gt; {
  try {
    const body = JSON.parse(event.Records[0].Sns.Message);

    // If there is no event type, then we've got nothing
    if (!body.eventType) { return callback() }

    // process event here...

    return callback()
  } catch (err) {
    // #todo: Track error here
    callback(err)
  }
}
&lt;/pre&gt; 
&lt;/code&gt;

&lt;p&gt;Few things you will notice&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I am no longer including &lt;code&gt;express&lt;/code&gt; and &lt;code&gt;body-parser&lt;/code&gt;. Lambda handles the routing and processing of the request body.&lt;/li&gt;
&lt;li&gt;My body data is coming from &lt;code&gt;event.Records[0].Sns.Message&lt;/code&gt;. This is how SNS sends data to Lambda. Its content will be a string so I need to convert it to an object with JSON.parse&lt;/li&gt;
&lt;li&gt;I am replacing &lt;code&gt;res.end()&lt;/code&gt; with &lt;code&gt;callback()&lt;/code&gt;. Since there are no more req and res parameters, callback is how we tell Lambda we are done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more on Amazon Lambda here: &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/getting-started.html" target="_blank" rel="noopener noreferrer"&gt;Getting Started with AWS Lambda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s switch from our hosted webhook to Lambda. We will start by creating the function.&lt;/p&gt;
        
&lt;ul&gt;
&lt;li&gt;Go to Amazon Lambda service in your console.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Functions&lt;/strong&gt; and the &lt;strong&gt;Create a function&lt;/strong&gt; button&lt;/li&gt;
&lt;li&gt;Give it a name, chose the Node.js runtime and create&lt;/li&gt;
&lt;li&gt;Next scroll down to the &lt;strong&gt;Function code&lt;/strong&gt; section. We are not going to be using the inline editor because we need to install &lt;code&gt;got&lt;/code&gt; and there is no way to do it using the inline editor. Instead, we are going to be uploading our local setup. Change the &lt;strong&gt;Code entry type&lt;/strong&gt; to &lt;strong&gt;Upload a .zip file&lt;/strong&gt;. Note that &lt;code&gt;index.handler&lt;/code&gt; in the &lt;strong&gt;Handler&lt;/strong&gt; input means "in &lt;strong&gt;index&lt;/strong&gt;.js, make a call to exports&lt;strong&gt;.handler&lt;/strong&gt;". If you are using a different file name from &lt;code&gt;index.js&lt;/code&gt;, then update the Handler section.&lt;/li&gt;
&lt;li&gt;Change directory to your updated script folder. Remember to have installed &lt;code&gt;got&lt;/code&gt; and remove &lt;code&gt;express&lt;/code&gt; and &lt;code&gt;body-parser&lt;/code&gt;. Select all the content and zip it. You should see an &lt;code&gt;index.js&lt;/code&gt; file, a &lt;code&gt;node_modules&lt;/code&gt; folder and &lt;code&gt;package.json&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;Go back to the function page and click the &lt;strong&gt;Function package&lt;/strong&gt; upload button. Select the zipped file and click the &lt;strong&gt;Save&lt;/strong&gt; button. (Review the additional options on the uploaded Lambda function page. If you are using environmental variables, there is a place you can add them. You may also want to increase the timeout to something more than 3 seconds depending on the processing you are doing with the events data.)&lt;/li&gt;
&lt;/ul&gt;
        
&lt;p&gt;Once uploaded, we can go back to our SNS subscription, change the &lt;strong&gt;Protocol&lt;/strong&gt; to AWS Lambda and select our Lambda function from the &lt;strong&gt;Endpoint&lt;/strong&gt; options.&lt;/p&gt;

&lt;img src="http://mailintel.io/images/resources/161219/update-sns.png" class="db ml3 bordered"&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Phew. That seems like a lot. Compared to the interesting things you can do with the events data though, may be not. Mailintel handles all this automatically to present your email analytics and reporting in a simple and detailed way. Do check it out: &lt;a href="https://mailintel.io/"&gt;mailintel.io&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;FAQs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;What’s the difference between Rejects vs Bounces&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;Rejects don’t reach the receiver’s email server. They only get to Amazon SES and get rejected. Bounces get to the receiver’s email server and get rejected. A reason a bounce can happen is if the email is wrong or full. If Amazon SES thinks it’s a temporary issue, if the receiver’s mailbox is full for example, it will attempt retries a couple of times before failing finally. You will get a bounce event at every attempt.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;How does open tracking work?&lt;/strong&gt;&lt;/p&gt;
      &lt;p&gt;Amazon SES adds a 1x1 pixel transparent image to the email to achieve this. There has been a lot of conversation around if this is ethical or not. For transactional emails, it’s a different conversation but one for some other time. &lt;/p&gt;
      &lt;p&gt;Few notes:&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;This only works for HTML emails&lt;/li&gt;
        &lt;li&gt;You can turn it off by not specifying a configuration set or not including opens tracking in the configuration set&lt;/li&gt;
        &lt;li&gt;Opens tracking is not 100% accurate. Some email clients require receivers to explicitly load embedded images. &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;How does click tracking work?&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;Amazon SES replaces links in the email with another link that tracks click and redirect to the original link. To disable tracking on a link, you can add &lt;code&gt;ses:no-track&lt;/code&gt; as an attribute to the A tag like this&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;&lt;a ses:no-track href="https://mailintel.io"&gt;Mailintel&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Click tracking also works for HTML emails only&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</description>
				<pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
				<link>https://mailintel.io/resources/tracking-deliveries-opens-and-clicks-for-amazon-ses</link>
				<guid isPermaLink="true">https://mailintel.io/resources/tracking-deliveries-opens-and-clicks-for-amazon-ses</guid>
			</item>
	</channel>
</rss>
