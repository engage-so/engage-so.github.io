I"õD<h1 id="javascript-sdk">JavaScript SDK</h1>

<p>The Engage JavaScript SDK lets you automatically identify users and capture events, actions and attributes on your site. It can be used both in Node.js or in the browser.</p>

<p>We recommend you read the <a href="/docs/guides/connecting-user-data">Connecting customer data</a> section to learn more about how capture customer data and what to capture.</p>

<p>New to Engage? <a href="https://app.engage.so/auth/signup">Create an account</a>.</p>

<h2 id="installation">Installation</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// NPM
npm install â€”save @engage_so/js
// Or Yarn
yarn add @engage_so/js
</code></pre></div></div>

<p>Alternatively, you can use directly from the CDN</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//d2969mkc0xw38n.cloudfront.net/next/engage.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p>If you are using the CDN version, then use the code below to ensure calls to the SDK before the script is completely loaded are handled.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Engage</span><span class="dl">'</span><span class="p">])</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
  <span class="nb">window</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">||</span> <span class="p">{};</span>
  <span class="nb">window</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">queue</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">queue</span> <span class="o">||</span> <span class="p">[];</span>
  <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Engage</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Engage</span><span class="dl">'</span><span class="p">]</span> <span class="o">||</span> <span class="p">{};</span>
  <span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="nb">window</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">f</span><span class="p">].</span><span class="nx">concat</span><span class="p">([].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)));</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">init</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">identify</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">addAttribute</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">track</span><span class="dl">'</span><span class="p">];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">[</span><span class="dl">'</span><span class="s1">Engage</span><span class="dl">'</span><span class="p">][</span><span class="nx">options</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">q</span><span class="p">(</span><span class="nx">options</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">script</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">el</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">//d2969mkc0xw38n.cloudfront.net/next/engage.min.js</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">el</span><span class="p">.</span><span class="k">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">);</span>
<span class="p">})(</span><span class="dl">'</span><span class="s1">engage</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="configuration">Configuration</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// commonjs/node-style require</span>
<span class="kd">const</span> <span class="nx">Engage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@engage_so/js</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ES module-style import</span>
<span class="k">import</span> <span class="nx">Engage</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@engage_so/js</span><span class="dl">'</span>
</code></pre></div></div>

<p>Initializing the SDK with your just API key:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Engage</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="dl">'</span><span class="s1">api_key</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<p>Initializing with additional options:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Engage</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
  <span class="na">key</span><span class="p">:</span> <span class="dl">'</span><span class="s1">api_key</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">secret</span><span class="p">:</span> <span class="dl">'</span><span class="s1">api_secret</span><span class="dl">'</span>
<span class="p">})</span>
</code></pre></div></div>

<p><strong>options:</strong></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">key</code>: Your account API key. Available in your account dashboard.</li>
  <li><code class="language-plaintext highlighter-rouge">secret</code>: Your account secret key. Available in your account dashboard.</li>
</ul>

<p>Engage identifies your application with the <code class="language-plaintext highlighter-rouge">key</code> parameter. This is enough to identify and track user events or actions. If however you want to do more, like update or delete user data, you need to add your <code class="language-plaintext highlighter-rouge">secret</code>. This should only be used in server side applications as your secret should be treated as a password and kept confidential.</p>

<h2 id="identifying-users">Identifying users</h2>

<p>Before you can track user events, actions or user properties, Engage needs to know some basic information about the userâ€“a unique id, email, name (optional) and when the user signed up on your application. (<a href="/docs/connecting-user-data">See connecting user data</a> for more). You only need to do this once; at user signup for example.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Engage</span><span class="p">.</span><span class="nx">identify</span><span class="p">({</span>
 <span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">u13345</span><span class="dl">'</span><span class="p">,</span>
 <span class="na">email</span><span class="p">:</span> <span class="dl">'</span><span class="s1">dan@mail.app</span><span class="dl">'</span><span class="p">,</span>
 <span class="na">created_at</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2020-05-30T09:30:10Z</span><span class="dl">'</span>
<span class="p">})</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">id</code> should be a unique identifier for the user. It should be a value that will not change in your application. For example, donâ€™t use a username as <code class="language-plaintext highlighter-rouge">id</code> if users can update their usernames*</p>

<p>The <code class="language-plaintext highlighter-rouge">created_at</code> property is optional. If not added, Engage sets it to the current timestamp. The other properties can be any parameter related to the user, e.g location, gender, plan. Here is a list of the ones we use internally; we call them standard properties:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">first_name</code></li>
  <li><code class="language-plaintext highlighter-rouge">last_name</code></li>
  <li><code class="language-plaintext highlighter-rouge">email</code></li>
  <li><code class="language-plaintext highlighter-rouge">number</code></li>
  <li><code class="language-plaintext highlighter-rouge">device_token</code></li>
  <li><code class="language-plaintext highlighter-rouge">device_platform</code> (android or ios)</li>
</ul>

<p>If you need to update any of the properties, you can call <code class="language-plaintext highlighter-rouge">identify</code> with the property set to the new value. If you need to update <code class="language-plaintext highlighter-rouge">email</code>, you need to use the <code class="language-plaintext highlighter-rouge">secret</code> parameter to initialise the SDK. Update is not allowed for client side integration. (Remember, only use your secret key in server side integrations).</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">number</code> must include international dialing code without the +. Valid examples are 15555551234 and 2348166877840</p>
</blockquote>

<h2 id="tracking-user-attributes">Tracking user attributes</h2>

<p>You can add attributes to users for segmentation. Allowed values for user attributes are boolean, numbers or strings. The first argument of the method is the userâ€™s id. In the examples below, we are assuming the userâ€™s id is <code class="language-plaintext highlighter-rouge">u144</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Engage</span><span class="p">.</span><span class="nx">addAttributes</span><span class="p">(</span><span class="dl">'</span><span class="s1">u144</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
 <span class="na">plan</span><span class="p">:</span> <span class="dl">'</span><span class="s1">pro</span><span class="dl">'</span><span class="p">,</span>
 <span class="na">promotion</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">})</span>
</code></pre></div></div>

<p>If an attribute changes at a later date, you can use the same method to update the new value.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Engage</span><span class="p">.</span><span class="nx">addAttributes</span><span class="p">(</span><span class="dl">'</span><span class="s1">u144</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
 <span class="na">plan</span><span class="p">:</span> <span class="dl">'</span><span class="s1">premium</span><span class="dl">'</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="tracking-user-events-and-actions">Tracking user events and actions</h2>

<p>Events and user actions can be tracked in a couple of ways. The simplest way to do this, where <code class="language-plaintext highlighter-rouge">u144</code> is ther userâ€™s id, is like this:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Engage</span><span class="p">.</span><span class="nx">track</span><span class="p">(</span><span class="dl">'</span><span class="s1">u144</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">deactivate</span><span class="dl">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Engage</span><span class="p">.</span><span class="nx">track</span><span class="p">(</span><span class="dl">'</span><span class="s1">u144</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
 <span class="na">event</span><span class="p">:</span> <span class="dl">'</span><span class="s1">New badge</span><span class="dl">'</span><span class="p">,</span>
 <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">gold</span><span class="dl">'</span>
 <span class="na">timestamp</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2020-05-30T09:30:10Z</span><span class="dl">'</span>
<span class="p">})</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">timestamp</code> is optional. If it is not included, Engage uses the current timestamp. If included, it must be a valid date time string.</p>

<p>Some events may have additional properties instead of a single value. Here is how to track those:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Engage</span><span class="p">.</span><span class="nx">track</span><span class="p">(</span><span class="dl">'</span><span class="s1">u144</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
 <span class="na">event</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Add to cart</span><span class="dl">'</span><span class="p">,</span>
 <span class="na">timestamp</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2020-05-30T09:30:10Z</span><span class="dl">'</span><span class="p">,</span>
 <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
   <span class="na">product</span><span class="p">:</span> <span class="dl">'</span><span class="s1">T123</span><span class="dl">'</span><span class="p">,</span>
   <span class="na">currency</span><span class="p">:</span> <span class="dl">'</span><span class="s1">USD</span><span class="dl">'</span><span class="p">,</span>
   <span class="na">amount</span><span class="p">:</span> <span class="mf">12.99</span>
 <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="difference-between-attribute-and-events-tracking">Difference between attribute and events tracking</h2>

<p>Attributes are attached to the userâ€™s metadata. If an attribute changes, the new value overrides the previous value. Events are not tracked that way. If an eventâ€™s value changes, the old value is not replaced. The new value is tracked with a different timestamp. This lets you be able to segment users based on old events within a time range. <a href="/docs/guides/connecting-user-data">Learn more</a>.</p>

<h2 id="a-note-on-values">A note on values</h2>

<p>When tracking attributes and events, it is important you use the right data type for better segmentation. For example, instead of using a string value of <code class="language-plaintext highlighter-rouge">$12.99</code> for a price, you can use a number value so that numerical operators like equality, greater than, less than can be used on the value.</p>

<p>To track a date attribute, use a valid date format like <code class="language-plaintext highlighter-rouge">2020-05-30</code> or <code class="language-plaintext highlighter-rouge">2020-05-30T09:30:10Z</code>.</p>

:ET